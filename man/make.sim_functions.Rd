% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make.sim_functions.R
\docType{class}
\name{make.sim_functions}
\alias{class.element_fx_closure}
\alias{element_fx_closure-class}
\alias{make.sim_functions}
\alias{show.element_fx_closure}
\title{Make simulation functions (closures)}
\format{In \code{R}, closures are shown with the code with which they were defined. Hence, the actual information that is contained in the closure will not be shown. Here, we have a special \code{show} function that shows the elemental function as well as the associated parameters in the closure. As with all \code{show} functions in \code{CAB}, the user is able to remove the \code{show} method with \code{remove.show.element_fx_closure()} and reinstate it with \code{show.closure.helper}.}
\usage{
make.sim_functions(conditions, model_object)

show.element_fx_closure
}
\arguments{
\item{conditions}{A list of conditions. See \code{\link{get.model_conditions}} for a nice way to specify this argument.}

\item{model_object}{A model object.}
}
\description{
Makes a closure from the functions specified in the \code{elemental} objects for a model and the parameters in the respective \code{control} objects. Specifically, the closure is implemented as its own class.
}
\details{
A \code{closure} is a function that contains some variables with some set values, i.e., the function closes over these variables. In the \code{CAB} package, the simulation of a model is done by creating closures using the functions that are specified in the \code{elemental} objects and with parameters that have been specified in the \code{control} objects. That is, each time a model is run with some parameters, each of the functions that are required to run the model are closed over the conditions for that particular combination of parameters.
}
\section{Slots}{

\describe{
\item{\code{element_fx}}{The elemental function.}

\item{\code{condition_info}}{The parameters from the control object.}

\item{\code{closure}}{The closure.}
}}
\examples{
# Following from the example in ?get.model_conditions
cond1 = get.model_conditions( my_COR, 1 )
my_sim_closures = make.sim_functions( cond1, my_COR )

}
\seealso{
\code{\link{class.model.COR}} For the example.

\code{\link{get.model_conditions}} Where \code{get.model_conditions} is a nice way to specify the \code{conditions} argument for \code{make.sim_functions}.

\code{\link{do.sim_fx}} For calling the functions made by \code{make.sim_functions}.
}
\keyword{datasets}

