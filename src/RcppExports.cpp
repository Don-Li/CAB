// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// EBD_BR
arma::umat EBD_BR(arma::umat fathers, arma::umat mothers);
RcppExport SEXP _CAB_EBD_BR(SEXP fathersSEXP, SEXP mothersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type fathers(fathersSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type mothers(mothersSEXP);
    rcpp_result_gen = Rcpp::wrap(EBD_BR(fathers, mothers));
    return rcpp_result_gen;
END_RCPP
}
// EBD_RS_BR
arma::umat EBD_RS_BR(arma::umat parents);
RcppExport SEXP _CAB_EBD_RS_BR(SEXP parentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type parents(parentsSEXP);
    rcpp_result_gen = Rcpp::wrap(EBD_RS_BR(parents));
    return rcpp_result_gen;
END_RCPP
}
// CAB_cpp_clean_short_ixyi
LogicalVector CAB_cpp_clean_short_ixyi(DataFrame data, String x_name, String y_name, double gap);
RcppExport SEXP _CAB_CAB_cpp_clean_short_ixyi(SEXP dataSEXP, SEXP x_nameSEXP, SEXP y_nameSEXP, SEXP gapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< String >::type x_name(x_nameSEXP);
    Rcpp::traits::input_parameter< String >::type y_name(y_nameSEXP);
    Rcpp::traits::input_parameter< double >::type gap(gapSEXP);
    rcpp_result_gen = Rcpp::wrap(CAB_cpp_clean_short_ixyi(data, x_name, y_name, gap));
    return rcpp_result_gen;
END_RCPP
}
// CAB_cpp_clean_short_ixxi
LogicalVector CAB_cpp_clean_short_ixxi(DataFrame data, String x_name, double gap);
RcppExport SEXP _CAB_CAB_cpp_clean_short_ixxi(SEXP dataSEXP, SEXP x_nameSEXP, SEXP gapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< String >::type x_name(x_nameSEXP);
    Rcpp::traits::input_parameter< double >::type gap(gapSEXP);
    rcpp_result_gen = Rcpp::wrap(CAB_cpp_clean_short_ixxi(data, x_name, gap));
    return rcpp_result_gen;
END_RCPP
}
// CAB_cpp_compute__I_xy_I__formal_event_record
NumericVector CAB_cpp_compute__I_xy_I__formal_event_record(DataFrame data, CharacterVector x_event, CharacterVector y_event, CharacterVector break_event);
RcppExport SEXP _CAB_CAB_cpp_compute__I_xy_I__formal_event_record(SEXP dataSEXP, SEXP x_eventSEXP, SEXP y_eventSEXP, SEXP break_eventSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type x_event(x_eventSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type y_event(y_eventSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type break_event(break_eventSEXP);
    rcpp_result_gen = Rcpp::wrap(CAB_cpp_compute__I_xy_I__formal_event_record(data, x_event, y_event, break_event));
    return rcpp_result_gen;
END_RCPP
}
// CAB_cpp_diff
NumericVector CAB_cpp_diff(NumericVector x);
RcppExport SEXP _CAB_CAB_cpp_diff(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(CAB_cpp_diff(x));
    return rcpp_result_gen;
END_RCPP
}
// CAB_cpp_geometric_fitness_selection
List CAB_cpp_geometric_fitness_selection(NumericVector fitness, int pop_size, double p);
RcppExport SEXP _CAB_CAB_cpp_geometric_fitness_selection(SEXP fitnessSEXP, SEXP pop_sizeSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type fitness(fitnessSEXP);
    Rcpp::traits::input_parameter< int >::type pop_size(pop_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(CAB_cpp_geometric_fitness_selection(fitness, pop_size, p));
    return rcpp_result_gen;
END_RCPP
}
// CAB_cpp_indicator_matrix
NumericMatrix CAB_cpp_indicator_matrix(NumericVector x);
RcppExport SEXP _CAB_CAB_cpp_indicator_matrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(CAB_cpp_indicator_matrix(x));
    return rcpp_result_gen;
END_RCPP
}
// CAB_cpp_int2bin
IntegerVector CAB_cpp_int2bin(int bits, IntegerVector n);
RcppExport SEXP _CAB_CAB_cpp_int2bin(SEXP bitsSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type bits(bitsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(CAB_cpp_int2bin(bits, n));
    return rcpp_result_gen;
END_RCPP
}
// compute_ixyi_FER
NumericVector compute_ixyi_FER(List data, CharacterVector x_event, CharacterVector y_event, double x_offset);
RcppExport SEXP _CAB_compute_ixyi_FER(SEXP dataSEXP, SEXP x_eventSEXP, SEXP y_eventSEXP, SEXP x_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type x_event(x_eventSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type y_event(y_eventSEXP);
    Rcpp::traits::input_parameter< double >::type x_offset(x_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_ixyi_FER(data, x_event, y_event, x_offset));
    return rcpp_result_gen;
END_RCPP
}
// compute_ixyi_FER_breaks
NumericVector compute_ixyi_FER_breaks(List data, CharacterVector x_event, CharacterVector y_event, CharacterVector break_events, double x_offset);
RcppExport SEXP _CAB_compute_ixyi_FER_breaks(SEXP dataSEXP, SEXP x_eventSEXP, SEXP y_eventSEXP, SEXP break_eventsSEXP, SEXP x_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type x_event(x_eventSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type y_event(y_eventSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type break_events(break_eventsSEXP);
    Rcpp::traits::input_parameter< double >::type x_offset(x_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_ixyi_FER_breaks(data, x_event, y_event, break_events, x_offset));
    return rcpp_result_gen;
END_RCPP
}
// compute_ixxi_FER
NumericVector compute_ixxi_FER(List data, CharacterVector x_event, double x_offset);
RcppExport SEXP _CAB_compute_ixxi_FER(SEXP dataSEXP, SEXP x_eventSEXP, SEXP x_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type x_event(x_eventSEXP);
    Rcpp::traits::input_parameter< double >::type x_offset(x_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_ixxi_FER(data, x_event, x_offset));
    return rcpp_result_gen;
END_RCPP
}
// compute_ixxi_FER_breaks
NumericVector compute_ixxi_FER_breaks(List data, CharacterVector x_event, CharacterVector break_events, double x_offset);
RcppExport SEXP _CAB_compute_ixxi_FER_breaks(SEXP dataSEXP, SEXP x_eventSEXP, SEXP break_eventsSEXP, SEXP x_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type x_event(x_eventSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type break_events(break_eventsSEXP);
    Rcpp::traits::input_parameter< double >::type x_offset(x_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_ixxi_FER_breaks(data, x_event, break_events, x_offset));
    return rcpp_result_gen;
END_RCPP
}
// ks
double ks(arma::colvec sample_1, arma::colvec sample_2);
RcppExport SEXP _CAB_ks(SEXP sample_1SEXP, SEXP sample_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type sample_1(sample_1SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type sample_2(sample_2SEXP);
    rcpp_result_gen = Rcpp::wrap(ks(sample_1, sample_2));
    return rcpp_result_gen;
END_RCPP
}
// CAB_cpp_local_times_formal_event_record
List CAB_cpp_local_times_formal_event_record(DataFrame data, String event, String marker, double event_offset, int n_markers);
RcppExport SEXP _CAB_CAB_cpp_local_times_formal_event_record(SEXP dataSEXP, SEXP eventSEXP, SEXP markerSEXP, SEXP event_offsetSEXP, SEXP n_markersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< String >::type event(eventSEXP);
    Rcpp::traits::input_parameter< String >::type marker(markerSEXP);
    Rcpp::traits::input_parameter< double >::type event_offset(event_offsetSEXP);
    Rcpp::traits::input_parameter< int >::type n_markers(n_markersSEXP);
    rcpp_result_gen = Rcpp::wrap(CAB_cpp_local_times_formal_event_record(data, event, marker, event_offset, n_markers));
    return rcpp_result_gen;
END_RCPP
}
// CAB_cpp_local_binning
List CAB_cpp_local_binning(NumericVector local_times, NumericVector visit_lengths, int max_bin, double bin_resolution);
RcppExport SEXP _CAB_CAB_cpp_local_binning(SEXP local_timesSEXP, SEXP visit_lengthsSEXP, SEXP max_binSEXP, SEXP bin_resolutionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type local_times(local_timesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type visit_lengths(visit_lengthsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bin(max_binSEXP);
    Rcpp::traits::input_parameter< double >::type bin_resolution(bin_resolutionSEXP);
    rcpp_result_gen = Rcpp::wrap(CAB_cpp_local_binning(local_times, visit_lengths, max_bin, bin_resolution));
    return rcpp_result_gen;
END_RCPP
}
// CAB_cpp_local_times_ragged_event_record
List CAB_cpp_local_times_ragged_event_record(NumericVector event_times, NumericVector marker_times, double event_offset);
RcppExport SEXP _CAB_CAB_cpp_local_times_ragged_event_record(SEXP event_timesSEXP, SEXP marker_timesSEXP, SEXP event_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type event_times(event_timesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type marker_times(marker_timesSEXP);
    Rcpp::traits::input_parameter< double >::type event_offset(event_offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(CAB_cpp_local_times_ragged_event_record(event_times, marker_times, event_offset));
    return rcpp_result_gen;
END_RCPP
}
// CAB_cpp_not_duplicated
LogicalVector CAB_cpp_not_duplicated(NumericVector x);
RcppExport SEXP _CAB_CAB_cpp_not_duplicated(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(CAB_cpp_not_duplicated(x));
    return rcpp_result_gen;
END_RCPP
}
// mcdowell_sampling
NumericMatrix mcdowell_sampling(NumericVector fitness, NumericVector fitness_weights);
RcppExport SEXP _CAB_mcdowell_sampling(SEXP fitnessSEXP, SEXP fitness_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type fitness(fitnessSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type fitness_weights(fitness_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(mcdowell_sampling(fitness, fitness_weights));
    return rcpp_result_gen;
END_RCPP
}
// srswo
NumericMatrix srswo(NumericVector choose, int repeats, int sample_size);
RcppExport SEXP _CAB_srswo(SEXP chooseSEXP, SEXP repeatsSEXP, SEXP sample_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type choose(chooseSEXP);
    Rcpp::traits::input_parameter< int >::type repeats(repeatsSEXP);
    Rcpp::traits::input_parameter< int >::type sample_size(sample_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(srswo(choose, repeats, sample_size));
    return rcpp_result_gen;
END_RCPP
}
// srs
NumericMatrix srs(int choose_max, int repeats, int sample_size);
RcppExport SEXP _CAB_srs(SEXP choose_maxSEXP, SEXP repeatsSEXP, SEXP sample_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type choose_max(choose_maxSEXP);
    Rcpp::traits::input_parameter< int >::type repeats(repeatsSEXP);
    Rcpp::traits::input_parameter< int >::type sample_size(sample_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(srs(choose_max, repeats, sample_size));
    return rcpp_result_gen;
END_RCPP
}
// CAB_cpp_unique
NumericVector CAB_cpp_unique(NumericVector x);
RcppExport SEXP _CAB_CAB_cpp_unique(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(CAB_cpp_unique(x));
    return rcpp_result_gen;
END_RCPP
}
// EBD_B_premutate
List EBD_B_premutate(double mutation_rate, int pop_size, int total_ticks, int n_bits);
RcppExport SEXP _CAB_EBD_B_premutate(SEXP mutation_rateSEXP, SEXP pop_sizeSEXP, SEXP total_ticksSEXP, SEXP n_bitsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mutation_rate(mutation_rateSEXP);
    Rcpp::traits::input_parameter< int >::type pop_size(pop_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type total_ticks(total_ticksSEXP);
    Rcpp::traits::input_parameter< int >::type n_bits(n_bitsSEXP);
    rcpp_result_gen = Rcpp::wrap(EBD_B_premutate(mutation_rate, pop_size, total_ticks, n_bits));
    return rcpp_result_gen;
END_RCPP
}
// EBD_prp_race
List EBD_prp_race(arma::uvec phenotypes, arma::uvec oc_lower, int prp_size);
RcppExport SEXP _CAB_EBD_prp_race(SEXP phenotypesSEXP, SEXP oc_lowerSEXP, SEXP prp_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type phenotypes(phenotypesSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type oc_lower(oc_lowerSEXP);
    Rcpp::traits::input_parameter< int >::type prp_size(prp_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(EBD_prp_race(phenotypes, oc_lower, prp_size));
    return rcpp_result_gen;
END_RCPP
}
// simple_factorial_counts
arma::umat simple_factorial_counts(CharacterVector event, NumericVector time, CharacterVector rft_labels, CharacterVector component_label, CharacterVector response_labels, int max_rfts);
RcppExport SEXP _CAB_simple_factorial_counts(SEXP eventSEXP, SEXP timeSEXP, SEXP rft_labelsSEXP, SEXP component_labelSEXP, SEXP response_labelsSEXP, SEXP max_rftsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type event(eventSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type rft_labels(rft_labelsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type component_label(component_labelSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type response_labels(response_labelsSEXP);
    Rcpp::traits::input_parameter< int >::type max_rfts(max_rftsSEXP);
    rcpp_result_gen = Rcpp::wrap(simple_factorial_counts(event, time, rft_labels, component_label, response_labels, max_rfts));
    return rcpp_result_gen;
END_RCPP
}
// simple_ixyi
List simple_ixyi(CharacterVector event, NumericVector time, CharacterVector x_events, CharacterVector y_events, CharacterVector break_events);
RcppExport SEXP _CAB_simple_ixyi(SEXP eventSEXP, SEXP timeSEXP, SEXP x_eventsSEXP, SEXP y_eventsSEXP, SEXP break_eventsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type event(eventSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type x_events(x_eventsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type y_events(y_eventsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type break_events(break_eventsSEXP);
    rcpp_result_gen = Rcpp::wrap(simple_ixyi(event, time, x_events, y_events, break_events));
    return rcpp_result_gen;
END_RCPP
}
// timesTwo
NumericVector timesTwo(NumericVector x);
RcppExport SEXP _CAB_timesTwo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwo(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CAB_EBD_BR", (DL_FUNC) &_CAB_EBD_BR, 2},
    {"_CAB_EBD_RS_BR", (DL_FUNC) &_CAB_EBD_RS_BR, 1},
    {"_CAB_CAB_cpp_clean_short_ixyi", (DL_FUNC) &_CAB_CAB_cpp_clean_short_ixyi, 4},
    {"_CAB_CAB_cpp_clean_short_ixxi", (DL_FUNC) &_CAB_CAB_cpp_clean_short_ixxi, 3},
    {"_CAB_CAB_cpp_compute__I_xy_I__formal_event_record", (DL_FUNC) &_CAB_CAB_cpp_compute__I_xy_I__formal_event_record, 4},
    {"_CAB_CAB_cpp_diff", (DL_FUNC) &_CAB_CAB_cpp_diff, 1},
    {"_CAB_CAB_cpp_geometric_fitness_selection", (DL_FUNC) &_CAB_CAB_cpp_geometric_fitness_selection, 3},
    {"_CAB_CAB_cpp_indicator_matrix", (DL_FUNC) &_CAB_CAB_cpp_indicator_matrix, 1},
    {"_CAB_CAB_cpp_int2bin", (DL_FUNC) &_CAB_CAB_cpp_int2bin, 2},
    {"_CAB_compute_ixyi_FER", (DL_FUNC) &_CAB_compute_ixyi_FER, 4},
    {"_CAB_compute_ixyi_FER_breaks", (DL_FUNC) &_CAB_compute_ixyi_FER_breaks, 5},
    {"_CAB_compute_ixxi_FER", (DL_FUNC) &_CAB_compute_ixxi_FER, 3},
    {"_CAB_compute_ixxi_FER_breaks", (DL_FUNC) &_CAB_compute_ixxi_FER_breaks, 4},
    {"_CAB_ks", (DL_FUNC) &_CAB_ks, 2},
    {"_CAB_CAB_cpp_local_times_formal_event_record", (DL_FUNC) &_CAB_CAB_cpp_local_times_formal_event_record, 5},
    {"_CAB_CAB_cpp_local_binning", (DL_FUNC) &_CAB_CAB_cpp_local_binning, 4},
    {"_CAB_CAB_cpp_local_times_ragged_event_record", (DL_FUNC) &_CAB_CAB_cpp_local_times_ragged_event_record, 3},
    {"_CAB_CAB_cpp_not_duplicated", (DL_FUNC) &_CAB_CAB_cpp_not_duplicated, 1},
    {"_CAB_mcdowell_sampling", (DL_FUNC) &_CAB_mcdowell_sampling, 2},
    {"_CAB_srswo", (DL_FUNC) &_CAB_srswo, 3},
    {"_CAB_srs", (DL_FUNC) &_CAB_srs, 3},
    {"_CAB_CAB_cpp_unique", (DL_FUNC) &_CAB_CAB_cpp_unique, 1},
    {"_CAB_EBD_B_premutate", (DL_FUNC) &_CAB_EBD_B_premutate, 4},
    {"_CAB_EBD_prp_race", (DL_FUNC) &_CAB_EBD_prp_race, 3},
    {"_CAB_simple_factorial_counts", (DL_FUNC) &_CAB_simple_factorial_counts, 6},
    {"_CAB_simple_ixyi", (DL_FUNC) &_CAB_simple_ixyi, 5},
    {"_CAB_timesTwo", (DL_FUNC) &_CAB_timesTwo, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_CAB(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
