// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// CAB_cpp_bitwise
NumericVector CAB_cpp_bitwise(int pop_size, NumericMatrix fathers, NumericMatrix mothers, double bias);
RcppExport SEXP CAB_CAB_cpp_bitwise(SEXP pop_sizeSEXP, SEXP fathersSEXP, SEXP mothersSEXP, SEXP biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type pop_size(pop_sizeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type fathers(fathersSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mothers(mothersSEXP);
    Rcpp::traits::input_parameter< double >::type bias(biasSEXP);
    __result = Rcpp::wrap(CAB_cpp_bitwise(pop_size, fathers, mothers, bias));
    return __result;
END_RCPP
}
// CAB_cpp_clean_short_ixyi
LogicalVector CAB_cpp_clean_short_ixyi(DataFrame data, String x_name, String y_name, double gap);
RcppExport SEXP CAB_CAB_cpp_clean_short_ixyi(SEXP dataSEXP, SEXP x_nameSEXP, SEXP y_nameSEXP, SEXP gapSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< String >::type x_name(x_nameSEXP);
    Rcpp::traits::input_parameter< String >::type y_name(y_nameSEXP);
    Rcpp::traits::input_parameter< double >::type gap(gapSEXP);
    __result = Rcpp::wrap(CAB_cpp_clean_short_ixyi(data, x_name, y_name, gap));
    return __result;
END_RCPP
}
// CAB_cpp_clean_short_ixxi
LogicalVector CAB_cpp_clean_short_ixxi(DataFrame data, String x_name, double gap);
RcppExport SEXP CAB_CAB_cpp_clean_short_ixxi(SEXP dataSEXP, SEXP x_nameSEXP, SEXP gapSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< String >::type x_name(x_nameSEXP);
    Rcpp::traits::input_parameter< double >::type gap(gapSEXP);
    __result = Rcpp::wrap(CAB_cpp_clean_short_ixxi(data, x_name, gap));
    return __result;
END_RCPP
}
// CAB_cpp_compute__I_xy_I__formal_event_record
NumericVector CAB_cpp_compute__I_xy_I__formal_event_record(DataFrame data, CharacterVector x_event, CharacterVector y_event, CharacterVector break_event);
RcppExport SEXP CAB_CAB_cpp_compute__I_xy_I__formal_event_record(SEXP dataSEXP, SEXP x_eventSEXP, SEXP y_eventSEXP, SEXP break_eventSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type x_event(x_eventSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type y_event(y_eventSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type break_event(break_eventSEXP);
    __result = Rcpp::wrap(CAB_cpp_compute__I_xy_I__formal_event_record(data, x_event, y_event, break_event));
    return __result;
END_RCPP
}
// CAB_cpp_diff
NumericVector CAB_cpp_diff(NumericVector x);
RcppExport SEXP CAB_CAB_cpp_diff(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    __result = Rcpp::wrap(CAB_cpp_diff(x));
    return __result;
END_RCPP
}
// CAB_cpp_geometric_fitness_selection
List CAB_cpp_geometric_fitness_selection(NumericVector fitness, int pop_size, double p);
RcppExport SEXP CAB_CAB_cpp_geometric_fitness_selection(SEXP fitnessSEXP, SEXP pop_sizeSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type fitness(fitnessSEXP);
    Rcpp::traits::input_parameter< int >::type pop_size(pop_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    __result = Rcpp::wrap(CAB_cpp_geometric_fitness_selection(fitness, pop_size, p));
    return __result;
END_RCPP
}
// CAB_cpp_indicator_matrix
NumericMatrix CAB_cpp_indicator_matrix(NumericVector x);
RcppExport SEXP CAB_CAB_cpp_indicator_matrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    __result = Rcpp::wrap(CAB_cpp_indicator_matrix(x));
    return __result;
END_RCPP
}
// CAB_cpp_int2bin
IntegerVector CAB_cpp_int2bin(int bits, IntegerVector n);
RcppExport SEXP CAB_CAB_cpp_int2bin(SEXP bitsSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type bits(bitsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type n(nSEXP);
    __result = Rcpp::wrap(CAB_cpp_int2bin(bits, n));
    return __result;
END_RCPP
}
// compute_ixyi_FER
NumericVector compute_ixyi_FER(List data, CharacterVector x_event, CharacterVector y_event, double x_offset);
RcppExport SEXP CAB_compute_ixyi_FER(SEXP dataSEXP, SEXP x_eventSEXP, SEXP y_eventSEXP, SEXP x_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type x_event(x_eventSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type y_event(y_eventSEXP);
    Rcpp::traits::input_parameter< double >::type x_offset(x_offsetSEXP);
    __result = Rcpp::wrap(compute_ixyi_FER(data, x_event, y_event, x_offset));
    return __result;
END_RCPP
}
// compute_ixyi_FER_breaks
NumericVector compute_ixyi_FER_breaks(List data, CharacterVector x_event, CharacterVector y_event, CharacterVector break_events, double x_offset);
RcppExport SEXP CAB_compute_ixyi_FER_breaks(SEXP dataSEXP, SEXP x_eventSEXP, SEXP y_eventSEXP, SEXP break_eventsSEXP, SEXP x_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type x_event(x_eventSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type y_event(y_eventSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type break_events(break_eventsSEXP);
    Rcpp::traits::input_parameter< double >::type x_offset(x_offsetSEXP);
    __result = Rcpp::wrap(compute_ixyi_FER_breaks(data, x_event, y_event, break_events, x_offset));
    return __result;
END_RCPP
}
// compute_ixxi_FER
NumericVector compute_ixxi_FER(List data, CharacterVector x_event, double x_offset);
RcppExport SEXP CAB_compute_ixxi_FER(SEXP dataSEXP, SEXP x_eventSEXP, SEXP x_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type x_event(x_eventSEXP);
    Rcpp::traits::input_parameter< double >::type x_offset(x_offsetSEXP);
    __result = Rcpp::wrap(compute_ixxi_FER(data, x_event, x_offset));
    return __result;
END_RCPP
}
// compute_ixxi_FER_breaks
NumericVector compute_ixxi_FER_breaks(List data, CharacterVector x_event, CharacterVector break_events, double x_offset);
RcppExport SEXP CAB_compute_ixxi_FER_breaks(SEXP dataSEXP, SEXP x_eventSEXP, SEXP break_eventsSEXP, SEXP x_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type x_event(x_eventSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type break_events(break_eventsSEXP);
    Rcpp::traits::input_parameter< double >::type x_offset(x_offsetSEXP);
    __result = Rcpp::wrap(compute_ixxi_FER_breaks(data, x_event, break_events, x_offset));
    return __result;
END_RCPP
}
// CAB_ks
double CAB_ks(arma::colvec sample_1, arma::colvec sample_2);
RcppExport SEXP CAB_CAB_ks(SEXP sample_1SEXP, SEXP sample_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::colvec >::type sample_1(sample_1SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type sample_2(sample_2SEXP);
    __result = Rcpp::wrap(CAB_ks(sample_1, sample_2));
    return __result;
END_RCPP
}
// CAB_cpp_local_times_formal_event_record
List CAB_cpp_local_times_formal_event_record(DataFrame data, String event, String marker, double event_offset, int n_markers);
RcppExport SEXP CAB_CAB_cpp_local_times_formal_event_record(SEXP dataSEXP, SEXP eventSEXP, SEXP markerSEXP, SEXP event_offsetSEXP, SEXP n_markersSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< String >::type event(eventSEXP);
    Rcpp::traits::input_parameter< String >::type marker(markerSEXP);
    Rcpp::traits::input_parameter< double >::type event_offset(event_offsetSEXP);
    Rcpp::traits::input_parameter< int >::type n_markers(n_markersSEXP);
    __result = Rcpp::wrap(CAB_cpp_local_times_formal_event_record(data, event, marker, event_offset, n_markers));
    return __result;
END_RCPP
}
// CAB_cpp_local_binning
List CAB_cpp_local_binning(NumericVector local_times, NumericVector visit_lengths, int max_bin, double bin_resolution);
RcppExport SEXP CAB_CAB_cpp_local_binning(SEXP local_timesSEXP, SEXP visit_lengthsSEXP, SEXP max_binSEXP, SEXP bin_resolutionSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type local_times(local_timesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type visit_lengths(visit_lengthsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bin(max_binSEXP);
    Rcpp::traits::input_parameter< double >::type bin_resolution(bin_resolutionSEXP);
    __result = Rcpp::wrap(CAB_cpp_local_binning(local_times, visit_lengths, max_bin, bin_resolution));
    return __result;
END_RCPP
}
// CAB_cpp_local_times_ragged_event_record
List CAB_cpp_local_times_ragged_event_record(NumericVector event_times, NumericVector marker_times, double event_offset);
RcppExport SEXP CAB_CAB_cpp_local_times_ragged_event_record(SEXP event_timesSEXP, SEXP marker_timesSEXP, SEXP event_offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type event_times(event_timesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type marker_times(marker_timesSEXP);
    Rcpp::traits::input_parameter< double >::type event_offset(event_offsetSEXP);
    __result = Rcpp::wrap(CAB_cpp_local_times_ragged_event_record(event_times, marker_times, event_offset));
    return __result;
END_RCPP
}
// CAB_cpp_not_duplicated
LogicalVector CAB_cpp_not_duplicated(NumericVector x);
RcppExport SEXP CAB_CAB_cpp_not_duplicated(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    __result = Rcpp::wrap(CAB_cpp_not_duplicated(x));
    return __result;
END_RCPP
}
// mcdowell_sampling
NumericMatrix mcdowell_sampling(NumericVector fitness, NumericVector fitness_weights);
RcppExport SEXP CAB_mcdowell_sampling(SEXP fitnessSEXP, SEXP fitness_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type fitness(fitnessSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type fitness_weights(fitness_weightsSEXP);
    __result = Rcpp::wrap(mcdowell_sampling(fitness, fitness_weights));
    return __result;
END_RCPP
}
// CAB_srswo
NumericMatrix CAB_srswo(NumericVector choose, int repeats, int sample_size);
RcppExport SEXP CAB_CAB_srswo(SEXP chooseSEXP, SEXP repeatsSEXP, SEXP sample_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type choose(chooseSEXP);
    Rcpp::traits::input_parameter< int >::type repeats(repeatsSEXP);
    Rcpp::traits::input_parameter< int >::type sample_size(sample_sizeSEXP);
    __result = Rcpp::wrap(CAB_srswo(choose, repeats, sample_size));
    return __result;
END_RCPP
}
// CAB_cpp_unique
NumericVector CAB_cpp_unique(NumericVector x);
RcppExport SEXP CAB_CAB_cpp_unique(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    __result = Rcpp::wrap(CAB_cpp_unique(x));
    return __result;
END_RCPP
}
// timesTwo
NumericVector timesTwo(NumericVector x);
RcppExport SEXP CAB_timesTwo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    __result = Rcpp::wrap(timesTwo(x));
    return __result;
END_RCPP
}
